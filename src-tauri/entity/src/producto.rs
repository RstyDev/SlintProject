//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15
use chrono::NaiveDateTime;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "producto")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Double")]
    pub precio_de_venta: f32,
    #[sea_orm(column_type = "Double")]
    pub porcentaje: f32,
    #[sea_orm(column_type = "Double")]
    pub precio_de_costo: f32,
    pub tipo_producto: String,
    pub marca: String,
    pub variedad: String,
    pub presentacion: String,
    #[sea_orm(column_type = "Double")]
    pub cantidad: f32,
    pub updated_at: NaiveDateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::codigo_barras::Entity")]
    CodigoBarras,
    #[sea_orm(has_many = "super::relacion_prod_prov::Entity")]
    RelacionProdProv,
    #[sea_orm(has_many = "super::relacion_venta_prod::Entity")]
    RelacionVentaProd,
}

impl Related<super::codigo_barras::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CodigoBarras.def()
    }
}

impl Related<super::relacion_prod_prov::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelacionProdProv.def()
    }
}

impl Related<super::relacion_venta_prod::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelacionVentaProd.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
